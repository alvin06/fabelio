{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nvar debounce = function debounce(fn, delay) {\n  var timeoutID = null;\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    } //@ts-ignore\n\n\n    var that = this;\n    timeoutID = setTimeout(function () {\n      fn.apply(that, args);\n    }, delay);\n  };\n};\n/**\r\n * Check if a string contains a value\r\n */\n\n\nfunction includes(str, term, caseSensitive) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (!caseSensitive) {\n    return String(str).toLowerCase().indexOf(String(term).toLowerCase()) > -1;\n  } else {\n    return String(str).indexOf(String(term)) > -1;\n  }\n}\n\nvar isDataObject = function isDataObject(obj, valueKey, labelKey) {\n  if (typeof labelKey === 'undefined' || typeof valueKey === 'undefined') {\n    return false;\n  }\n\n  return typeof obj === 'object' && obj.hasOwnProperty(valueKey) && obj.hasOwnProperty(labelKey);\n};\n\nvar hasItem = function hasItem(all, item, valueKey, labelKey, returnIndex) {\n  if (returnIndex === void 0) {\n    returnIndex = false;\n  }\n\n  if (!all || !item) return false;\n\n  if (Array.isArray(all)) {\n    if (isDataObject(item, valueKey, labelKey)) {\n      var find = all.findIndex(function (opt) {\n        return opt[valueKey] === item[valueKey];\n      });\n\n      if (returnIndex) {\n        return find;\n      }\n\n      return find > -1;\n    } else {\n      var indexOfItem = all.indexOf(item);\n\n      if (returnIndex) {\n        return indexOfItem;\n      }\n\n      return indexOfItem > -1;\n    }\n  } else {\n    if (isDataObject(item, valueKey, labelKey)) {\n      return all[valueKey] === item[valueKey];\n    }\n\n    return all === item;\n  }\n};\n\nvar hasItemIndex = function hasItemIndex(all, item, valueKey, labelKey) {\n  return hasItem(all, item, valueKey, labelKey, true);\n};\n\nvar keyExtractor = function keyExtractor(item, valueKey, labelKey) {\n  return isDataObject(item, valueKey, labelKey) ? item[valueKey] : item;\n};\n\nfunction sortCollection(array, valueKey) {\n  if (valueKey) {\n    return array.sort(function (a, b) {\n      return a[valueKey] < b[valueKey] ? -1 : 1;\n    });\n  } else {\n    return array.sort(function (a, b) {\n      return a < b ? -1 : 1;\n    });\n  }\n}\n\nfunction arraysEqual(left, right) {\n  if (left.length !== right.length) return false;\n  var leftLen = left.length;\n  var i = leftLen;\n\n  while (i) {\n    if (left[i] !== right[i]) return false;\n    i--;\n  }\n\n  return true;\n}\n\nvar asArray = function asArray(obj) {\n  return obj || [];\n};\n\nfunction split(str) {\n  var a = 1;\n  var res = '';\n  var parts = (str || '').split('%');\n  var len = parts.length;\n\n  if (len > 0) {\n    res += parts[0];\n  }\n\n  for (var i = 1; i < len; i++) {\n    if (parts[i][0] === 's' || parts[i][0] === 'd') {\n      var value = arguments[a++];\n      res += parts[i][0] === 'd' ? Math.floor(value) : value;\n    } else if (parts[i][0]) {\n      res += '%' + parts[i][0];\n    } else {\n      i++;\n      res += '%' + parts[i][0];\n    }\n\n    res += parts[i].substring(1);\n  }\n\n  return res;\n}\n\nvar regex = /%[sdj]/;\n\nfunction format(message) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (regex.test(message)) {\n    return split.apply(null, arguments);\n  }\n\n  return Array.from(args).join(' ');\n}\n\nvar isEmptyValue = function isEmptyValue(value) {\n  return value === null || value === undefined || Array.isArray(value) && !value.length;\n};\n\nvar Placeholder =\n/*#__PURE__*/\nReact.memo(function (_ref) {\n  var placeholder = _ref.placeholder,\n      value = _ref.value,\n      numberDisplayed = _ref.numberDisplayed,\n      multiple = _ref.multiple,\n      valueKey = _ref.valueKey,\n      labelKey = _ref.labelKey,\n      manySelectedPlaceholder = _ref.manySelectedPlaceholder,\n      allSelectedPlaceholder = _ref.allSelectedPlaceholder,\n      allSelected = _ref.allSelected;\n  var message = '';\n\n  if (isEmptyValue(value)) {\n    message = placeholder || '';\n  } else {\n    if (Array.isArray(value) && multiple) {\n      // If type is array and values length less than number displayed\n      // join the values\n      if (value.length <= numberDisplayed) {\n        message = value.map(function (opt) {\n          if (isDataObject(opt, valueKey, labelKey)) {\n            return opt[labelKey];\n          }\n\n          return opt;\n        }).join(', ');\n      } else {\n        // if many selected and not all selected then use the placeholder\n        if (manySelectedPlaceholder && allSelected !== 'all') {\n          // if it doesn't include the sprintf token then just use the placeholder\n          message = includes(manySelectedPlaceholder, '%s') ? format(manySelectedPlaceholder, value.length) : manySelectedPlaceholder; //If all selected and there is an allselectedplaceholder use that\n        } else if (allSelected && allSelectedPlaceholder) {\n          // if it doesn't include the sprintf token then just use the placeholder\n          message = includes(allSelectedPlaceholder, '%s') ? format(allSelectedPlaceholder, value.length) : allSelectedPlaceholder;\n        }\n      }\n    } else {\n      var tempValue = Array.isArray(value) ? value[0] : value;\n\n      if (isDataObject(tempValue, valueKey, labelKey)) {\n        message = tempValue[labelKey];\n      } else {\n        message = String(tempValue);\n      }\n    }\n  }\n\n  return React.createElement(\"span\", {\n    className: !isEmptyValue(value) ? 'picky__placeholder' : undefined,\n    \"data-testid\": \"picky_placeholder\"\n  }, message);\n}, areEqual);\nPlaceholder.defaultProps = {\n  placeholder: 'None selected',\n  allSelectedPlaceholder: '%s selected',\n  manySelectedPlaceholder: '%s selected'\n};\nPlaceholder.displayName = 'Picky(Placeholder)';\n\nfunction areEqual(prevProps, nextProps) {\n  return prevProps.multiple === nextProps.multiple && prevProps.value === nextProps.value && prevProps.numberDisplayed === nextProps.numberDisplayed && prevProps.allSelected === nextProps.allSelected && prevProps.allSelectedPlaceholder === nextProps.allSelectedPlaceholder;\n}\n\nvar Filter =\n/*#__PURE__*/\nReact.forwardRef(function (_ref, ref) {\n  var placeholder = _ref.placeholder,\n      tabIndex = _ref.tabIndex,\n      onFilterChange = _ref.onFilterChange;\n  return React.createElement(\"div\", {\n    className: \"picky__filter\"\n  }, React.createElement(\"input\", {\n    ref: ref,\n    type: \"text\",\n    className: \"picky__filter__input\",\n    \"data-testid\": \"picky__filter__input\",\n    placeholder: placeholder,\n    tabIndex: tabIndex,\n    \"aria-label\": \"filter options\",\n    onChange: function onChange(e) {\n      return onFilterChange(e.target.value);\n    }\n  }));\n});\nFilter.defaultProps = {\n  placeholder: 'Filter...'\n};\nFilter.displayName = 'Picky(Filter)';\nvar Option =\n/*#__PURE__*/\nReact.memo(function (_ref) {\n  var id = _ref.id,\n      item = _ref.item,\n      isSelected = _ref.isSelected,\n      labelKey = _ref.labelKey,\n      valueKey = _ref.valueKey,\n      selectValue = _ref.selectValue,\n      style = _ref.style,\n      multiple = _ref.multiple,\n      tabIndex = _ref.tabIndex,\n      disabled = _ref.disabled;\n  var cssClass = isSelected ? 'option selected' : 'option';\n  var body = isDataObject(item, labelKey, valueKey) ? item[labelKey] : item;\n  var inputType = multiple ? 'checkbox' : 'radio';\n\n  var select = function select() {\n    return !disabled && selectValue(item);\n  };\n\n  return React.createElement(\"div\", {\n    tabIndex: tabIndex,\n    id: id,\n    role: \"option\",\n    style: style,\n    \"data-testid\": \"option\",\n    \"data-selected\": isSelected ? 'selected' : '',\n    \"aria-selected\": isSelected,\n    className: cssClass,\n    onClick: select,\n    onKeyPress: function onKeyPress(e) {\n      e.preventDefault();\n\n      if (!disabled) {\n        selectValue(item);\n      }\n    }\n  }, React.createElement(\"input\", {\n    type: inputType,\n    readOnly: true,\n    tabIndex: -1,\n    disabled: disabled,\n    checked: isSelected,\n    \"aria-label\": body,\n    \"data-testid\": 'option-checkbox'\n  }), body);\n}, areEqual$1);\nOption.displayName = 'Picky(Option)';\n\nfunction areEqual$1(prevProps, nextProps) {\n  return prevProps.multiple === nextProps.multiple && prevProps.isSelected === nextProps.isSelected && prevProps.id === nextProps.id && prevProps.item === nextProps.item && prevProps.tabIndex === nextProps.tabIndex && prevProps.disabled === nextProps.disabled;\n}\n\nvar SelectAll =\n/*#__PURE__*/\nReact.memo(function (_ref) {\n  var tabIndex = _ref.tabIndex,\n      disabled = _ref.disabled,\n      allSelected = _ref.allSelected,\n      id = _ref.id,\n      selectAllText = _ref.selectAllText,\n      toggleSelectAll = _ref.toggleSelectAll,\n      visible = _ref.visible;\n  var checkboxRef = React.createRef();\n\n  if (!visible) {\n    return null;\n  }\n\n  React.useEffect(function () {\n    if (checkboxRef.current === null) return;\n    checkboxRef.current.indeterminate = allSelected === 'partial';\n  }, [allSelected]);\n  return React.createElement(\"div\", {\n    tabIndex: tabIndex,\n    role: \"option\",\n    \"data-testid\": \"selectall\",\n    id: id + '-option-' + 'selectall',\n    \"data-selectall\": \"true\",\n    \"aria-selected\": allSelected === 'all',\n    className: allSelected === 'all' ? 'option selected' : 'option',\n    onClick: toggleSelectAll,\n    onKeyPress: toggleSelectAll\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    ref: checkboxRef,\n    readOnly: true,\n    \"data-testid\": \"selectall-checkbox\",\n    tabIndex: -1,\n    checked: allSelected === 'all',\n    \"aria-label\": \"select all\",\n    disabled: disabled\n  }), React.createElement(\"span\", {\n    \"data-testid\": \"select-all-text\"\n  }, selectAllText));\n}, areEqual$2);\nSelectAll.displayName = 'Picky(SelectAll)';\n\nfunction areEqual$2(prevProps, nextProps) {\n  return prevProps.tabIndex === nextProps.tabIndex && prevProps.disabled === nextProps.disabled && prevProps.allSelected === nextProps.allSelected && prevProps.selectAllText === nextProps.selectAllText && prevProps.visible === nextProps.visible;\n}\n\nvar Button = function Button(_ref) {\n  var id = _ref.id,\n      disabled = _ref.disabled,\n      onClick = _ref.onClick,\n      children = _ref.children,\n      className = _ref.className,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"id\", \"disabled\", \"onClick\", \"children\", \"className\"]);\n\n  var buttonId = id + \"__button\";\n  var classes = ['picky__input', disabled ? 'picky__input--disabled' : '', className].join(' ');\n  return React.createElement(\"button\", Object.assign({\n    id: buttonId,\n    type: \"button\",\n    className: classes,\n    onClick: onClick,\n    \"data-testid\": \"picky-input\",\n    disabled: disabled\n  }, rest), children);\n};\n\nButton.displayName = 'Picky(Button)';\n\nvar Picky =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Picky, _React$PureComponent);\n\n  function Picky(props) {\n    var _this;\n\n    _this = _React$PureComponent.call(this, props) || this;\n    _this.node = null;\n    _this.filter = null;\n    _this.state = {\n      selectedValue: props.value || (props.multiple ? [] : null),\n      open: props.open,\n      filtered: false,\n      filteredOptions: [],\n      allSelected: 'none'\n    };\n    _this.toggleDropDown = _this.toggleDropDown.bind(_assertThisInitialized(_this));\n    _this.toggleSelectAll = _this.toggleSelectAll.bind(_assertThisInitialized(_this));\n    _this.onFilterChange = _this.onFilterChange.bind(_assertThisInitialized(_this));\n    _this.selectValue = _this.selectValue.bind(_assertThisInitialized(_this));\n    _this.allSelected = _this.allSelected.bind(_assertThisInitialized(_this));\n    _this.handleOutsideClick = _this.handleOutsideClick.bind(_assertThisInitialized(_this));\n    _this.isItemSelected = _this.isItemSelected.bind(_assertThisInitialized(_this));\n    _this.focusFilterInput = _this.focusFilterInput.bind(_assertThisInitialized(_this));\n    _this.getValue = _this.getValue.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = Picky.prototype;\n\n  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {\n    this.setState({\n      allSelected: this.allSelected()\n    });\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.focusFilterInput(!!this.state.open);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick, false);\n  };\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.options !== nextProps.options || this.props.value !== nextProps.value) {\n      var valuesEqual = Array.isArray(nextProps.value) ? arraysEqual(nextProps.value, this.props.value) : nextProps.value === this.props.value;\n      var optsEqual = arraysEqual(nextProps.options, this.props.options);\n      var currentOptions = this.state.filtered ? this.state.filteredOptions : nextProps.options;\n      var currentValues = this.state.filtered ? this.state.filteredOptions.filter(function (value) {\n        if (Array.isArray(nextProps.value)) {\n          return nextProps.value.includes(value);\n        }\n\n        return true;\n      }) : nextProps.value;\n      this.setState({\n        allSelected: !(valuesEqual && optsEqual) ? // FIXME\n        //@ts-ignore\n        this.allSelected(currentValues, currentOptions) : this.allSelected()\n      });\n    }\n  };\n\n  _proto.selectValue = function selectValue(val) {\n    var _this2 = this;\n\n    var valueLookup = this.props.value;\n\n    if (this.props.multiple && Array.isArray(valueLookup)) {\n      var itemIndex = hasItemIndex(valueLookup, val, this.props.valueKey, this.props.labelKey);\n      var selectedValue = [];\n\n      if (itemIndex > -1) {\n        selectedValue = [].concat(valueLookup.slice(0, itemIndex), valueLookup.slice(itemIndex + 1));\n      } else {\n        selectedValue = [].concat(this.props.value, [val]);\n      }\n\n      this.setState({\n        allSelected: this.allSelected(selectedValue)\n      }, function () {\n        _this2.props.onChange(selectedValue);\n      });\n    } else {\n      this.props.onChange(val);\n    }\n  }\n  /**\r\n   * Get the value of a given option or value safely\r\n   *\r\n   * @param {*} option\r\n   * @returns\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.getValue = function getValue(option) {\n    return typeof this.props.valueKey !== 'undefined' ? option[this.props.valueKey] : option;\n  }\n  /**\r\n   * Determine whether all items are selected\r\n   *\r\n   * @returns {Boolean}\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.allSelected = function allSelected(overrideSelected, overrideOptions) {\n    var _this$props = this.props,\n        value = _this$props.value,\n        options = _this$props.options;\n    var selectedValue = overrideSelected || value;\n    var selectedOptions = overrideOptions || options; // If there are no options we are getting a false positive for all items being selected\n\n    if (selectedOptions && selectedOptions.length === 0) {\n      return 'none';\n    }\n\n    var copiedOptions = selectedOptions.map(this.getValue);\n    var copiedValues = Array.isArray(selectedValue) ? selectedValue.map(this.getValue) : [];\n    var areEqual = arraysEqual(sortCollection(copiedValues), sortCollection(copiedOptions));\n\n    if (areEqual) {\n      return 'all';\n    } else if (copiedValues.length > 0) {\n      return 'partial';\n    } else {\n      return 'none';\n    }\n  }\n  /**\r\n   * Toggles select all\r\n   *\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.toggleSelectAll = function toggleSelectAll() {\n    var _this3 = this;\n\n    if (this.props.disabled) return;\n    this.setState(function (state) {\n      return _extends({}, state, {\n        allSelected: _this3.state.allSelected === 'all' ? 'none' : 'all'\n      });\n    }, function () {\n      if (_this3.state.allSelected !== 'all') {\n        if (_this3.state.filtered) {\n          var diff = asArray(_this3.props.value).filter(function (item) {\n            return !_this3.state.filteredOptions.includes(item);\n          });\n\n          _this3.props.onChange(diff);\n        } else {\n          _this3.props.onChange([]);\n        }\n      } else {\n        if (_this3.state.filtered) {\n          var newValues = [].concat(_this3.props.value, _this3.state.filteredOptions);\n\n          _this3.props.onChange(newValues);\n        } else {\n          _this3.props.onChange(_this3.props.options);\n        }\n      }\n    });\n  };\n\n  _proto.isItemSelected = function isItemSelected(item) {\n    return hasItem(this.props.value, item, this.props.valueKey, this.props.labelKey);\n  };\n\n  _proto.renderOptions = function renderOptions() {\n    var _this4 = this;\n\n    var items = this.state.filtered ? this.state.filteredOptions : this.props.options;\n    var _this$props2 = this.props,\n        labelKey = _this$props2.labelKey,\n        valueKey = _this$props2.valueKey,\n        multiple = _this$props2.multiple,\n        render = _this$props2.render,\n        tabIndex = _this$props2.tabIndex,\n        renderList = _this$props2.renderList,\n        disabled = _this$props2.disabled;\n\n    if (renderList) {\n      return renderList({\n        items: items,\n        selected: this.props.value,\n        multiple: multiple,\n        tabIndex: tabIndex,\n        getIsSelected: this.isItemSelected,\n        selectValue: this.selectValue,\n        disabled: disabled\n      });\n    }\n\n    return items.map(function (item, index) {\n      // Create a key based on the options value\n      var key = keyExtractor(item, valueKey, labelKey);\n\n      var isSelected = _this4.isItemSelected(item); // If render prop supplied for items call that.\n\n\n      if (typeof render === 'function') {\n        return render({\n          index: index,\n          item: item,\n          isSelected: isSelected,\n          selectValue: _this4.selectValue,\n          labelKey: labelKey,\n          valueKey: valueKey,\n          multiple: multiple,\n          disabled: disabled\n        });\n      } else {\n        // Render a simple option\n        return React.createElement(Option, {\n          key: key,\n          item: item,\n          isSelected: isSelected,\n          selectValue: _this4.selectValue,\n          labelKey: labelKey,\n          valueKey: valueKey,\n          multiple: Boolean(multiple),\n          tabIndex: tabIndex,\n          disabled: Boolean(disabled),\n          id: _this4.props.id + '-option-' + index\n        });\n      }\n    });\n  }\n  /**\r\n   * Called when Filter term changes. Sets filteredOptions and filtered state.\r\n   *\r\n   * @param {any} term\r\n   * @returns\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.onFilterChange = function onFilterChange(term) {\n    var _this5 = this;\n\n    var processedTerm = typeof this.props.filterTermProcessor === 'function' ? this.props.filterTermProcessor(term) : term;\n    /**\r\n     * getFilterValue function will provide the input value of filter to the picky dropdown, so that if we have a larger list of options then we can only supply the matching options based on this value\r\n     */\n\n    if (this.props.getFilterValue) {\n      this.props.getFilterValue(processedTerm);\n    }\n\n    if (!processedTerm.trim()) {\n      return this.setState({\n        filtered: false,\n        filteredOptions: [],\n        allSelected: asArray(this.props.value).length > 0 ? 'partial' : 'none'\n      });\n    }\n\n    var isObject = isDataObject(this.props.options && this.props.options[0], this.props.valueKey, this.props.labelKey);\n    var filteredOptions = this.props.options.filter(function (option) {\n      if (isObject) {\n        return includes(option[_this5.props.labelKey], processedTerm, !!_this5.props.caseSensitiveFilter);\n      }\n\n      return includes(option, processedTerm, _this5.props.caseSensitiveFilter);\n    });\n    this.setState({\n      filtered: true,\n      filteredOptions: filteredOptions\n    }, function () {\n      if (_this5.props.onFiltered) {\n        _this5.props.onFiltered(filteredOptions);\n      }\n    });\n  }\n  /**\r\n   *\r\n   * Called by a click event listener. Used to determine any clicks that occur outside of the component.\r\n   * @param {MouseEvent} e\r\n   * @returns\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.handleOutsideClick = function handleOutsideClick(e) {\n    // If keep open then don't toggle dropdown\n    // If radio and not keepOpen then auto close it on selecting a value\n    // If radio and click to the filter input then don't toggle dropdown\n    var keepOpen = this.props.keepOpen || this.props.multiple;\n\n    if (this.node && this.node.contains(e.target) && keepOpen) {\n      return;\n    }\n\n    if (this.filter && this.filter.contains(e.target)) {\n      return;\n    }\n\n    this.toggleDropDown();\n  };\n\n  _proto.focusFilterInput = function focusFilterInput(isOpen) {\n    if (!this.filter) return;\n\n    if (isOpen && this.props.defaultFocusFilter) {\n      this.filter.focus();\n    }\n\n    if (!isOpen && this.props.clearFilterOnClose === true) {\n      this.filter.value = '';\n    }\n  }\n  /**\r\n   * Toggle state of dropdown\r\n   *\r\n   * @memberof Picky\r\n   */\n  ;\n\n  _proto.toggleDropDown = function toggleDropDown() {\n    var _this6 = this;\n\n    if (!this.state.open) {\n      // Add event listener to listen for clicks to determine if click occured outside the component or not\n      document.addEventListener('click', this.handleOutsideClick, false);\n    } else {\n      // Remove\n      document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    this.setState(function (state) {\n      return _extends({}, state, {\n        // Toggle open state\n        open: !state.open,\n        filtered: _this6.props.clearFilterOnClose ? false : state.filtered,\n        filteredOptions: _this6.props.clearFilterOnClose ? [] : state.filteredOptions\n      });\n    }, function () {\n      var isOpen = !!_this6.state.open; // Prop callbacks\n\n      _this6.focusFilterInput(isOpen);\n\n      if (isOpen && _this6.props.onOpen) {\n        _this6.props.onOpen();\n      } else if (!isOpen && _this6.props.onClose) {\n        _this6.props.onClose();\n      }\n    });\n  };\n\n  _proto.render = function render() {\n    var _this7 = this;\n\n    var _this$props3 = this.props,\n        className = _this$props3.className,\n        placeholder = _this$props3.placeholder,\n        value = _this$props3.value,\n        multiple = _this$props3.multiple,\n        numberDisplayed = _this$props3.numberDisplayed,\n        includeFilter = _this$props3.includeFilter,\n        valueKey = _this$props3.valueKey,\n        labelKey = _this$props3.labelKey,\n        tabIndex = _this$props3.tabIndex,\n        dropdownHeight = _this$props3.dropdownHeight,\n        renderSelectAll = _this$props3.renderSelectAll,\n        filterPlaceholder = _this$props3.filterPlaceholder,\n        disabled = _this$props3.disabled,\n        buttonProps = _this$props3.buttonProps;\n    var open = this.state.open;\n    var ariaOwns = '';\n\n    if (open) {\n      ariaOwns += this.props.id + '-list';\n    }\n\n    var buttonId = this.props.id + \"__button\";\n    var dropdownStyle = {\n      maxHeight: dropdownHeight,\n      overflowY: 'scroll'\n    };\n    return React.createElement(\"div\", {\n      ref: function ref(node) {\n        _this7.node = node;\n      },\n      className: ['picky', className].join(' '),\n      id: this.props.id,\n      role: \"combobox\",\n      \"aria-controls\": buttonId,\n      \"aria-expanded\": open,\n      \"aria-haspopup\": open,\n      \"aria-owns\": ariaOwns,\n      tabIndex: tabIndex\n    }, React.createElement(Button, Object.assign({\n      id: this.props.id + \"__button\",\n      disabled: disabled,\n      onClick: this.toggleDropDown\n    }, buttonProps), React.createElement(Placeholder, {\n      allSelected: this.state.allSelected,\n      placeholder: placeholder,\n      manySelectedPlaceholder: this.props.manySelectedPlaceholder,\n      allSelectedPlaceholder: this.props.allSelectedPlaceholder,\n      value: value,\n      multiple: Boolean(multiple),\n      numberDisplayed: numberDisplayed,\n      valueKey: valueKey,\n      labelKey: labelKey,\n      \"data-testid\": \"placeholder-component\"\n    })), React.createElement(\"div\", {\n      className: \"picky__dropdown\",\n      id: this.props.id + '-list',\n      \"aria-hidden\": !open,\n      hidden: !open,\n      style: open ? dropdownStyle : {\n        visibility: 'hidden'\n      }\n    }, includeFilter && React.createElement(Filter, {\n      tabIndex: tabIndex,\n      ref: function ref(filter) {\n        return _this7.filter = filter;\n      },\n      placeholder: filterPlaceholder,\n      onFilterChange: this.filterDebounce\n    }), renderSelectAll ? renderSelectAll({\n      filtered: Boolean(this.state.filtered),\n      allSelected: this.state.allSelected,\n      toggleSelectAll: this.toggleSelectAll,\n      tabIndex: tabIndex,\n      multiple: Boolean(multiple),\n      disabled: Boolean(disabled)\n    }) : React.createElement(SelectAll, {\n      visible: this.showSelectAll,\n      tabIndex: tabIndex,\n      disabled: !!disabled,\n      allSelected: this.state.allSelected,\n      id: this.props.id,\n      selectAllText: this.props.selectAllText,\n      toggleSelectAll: this.toggleSelectAll\n    }), open && React.createElement(\"div\", {\n      \"data-testid\": \"dropdown\"\n    }, this.renderOptions())));\n  };\n\n  _createClass(Picky, [{\n    key: \"filterDebounce\",\n    get: function get() {\n      var filterDebounce = this.props.filterDebounce;\n      var amount = filterDebounce || 0;\n      return (amount || 0) > 0 ? debounce(this.onFilterChange, amount) : this.onFilterChange;\n    }\n  }, {\n    key: \"showSelectAll\",\n    get: function get() {\n      var _this$props4 = this.props,\n          renderSelectAll = _this$props4.renderSelectAll,\n          multiple = _this$props4.multiple,\n          includeSelectAll = _this$props4.includeSelectAll;\n      return Boolean(!renderSelectAll && includeSelectAll && multiple && (this.props.selectAllMode === 'default' && !this.state.filtered || this.props.selectAllMode === 'filtered'));\n    }\n  }]);\n\n  return Picky;\n}(React.PureComponent);\n\nPicky.defaultProps = {\n  id: 'picky',\n  numberDisplayed: 3,\n  options: [],\n  filterDebounce: 150,\n  dropdownHeight: 300,\n  onChange: function onChange() {},\n  tabIndex: 0,\n  keepOpen: true,\n  selectAllText: 'Select all',\n  selectAllMode: 'default',\n  filterTermProcessor: function filterTermProcessor(term) {\n    return term;\n  }\n};\nexports.Picky = Picky;","map":{"version":3,"sources":["../src/lib/debounce.ts","../src/lib/includes.ts","../src/lib/utils.ts","../src/lib/format.ts","../src/Placeholder.tsx","../src/Filter.tsx","../src/Option.tsx","../src/SelectAll.tsx","../src/Button.tsx","../src/Picky.tsx"],"names":["debounce","timeoutID","args","clearTimeout","that","setTimeout","fn","includes","str","term","caseSensitive","String","isDataObject","obj","hasItem","returnIndex","Array","find","opt","item","indexOfItem","all","hasItemIndex","keyExtractor","sortCollection","array","valueKey","a","b","arraysEqual","left","right","leftLen","i","asArray","res","parts","len","value","arguments","Math","regex","format","message","split","isEmptyValue","Placeholder","React","placeholder","numberDisplayed","multiple","labelKey","manySelectedPlaceholder","allSelectedPlaceholder","allSelected","tempValue","className","undefined","prevProps","nextProps","Filter","tabIndex","onFilterChange","ref","type","onChange","e","Option","id","isSelected","selectValue","style","disabled","cssClass","body","inputType","select","role","onClick","onKeyPress","readOnly","checked","SelectAll","selectAllText","toggleSelectAll","visible","checkboxRef","Button","children","rest","buttonId","classes","Picky","options","filterDebounce","dropdownHeight","keepOpen","selectAllMode","filterTermProcessor","selectedValue","props","open","filtered","filteredOptions","UNSAFE_componentWillMount","componentDidMount","componentWillUnmount","document","UNSAFE_componentWillReceiveProps","valuesEqual","optsEqual","currentOptions","currentValues","valueLookup","itemIndex","getValue","option","overrideSelected","selectedOptions","overrideOptions","copiedOptions","copiedValues","areEqual","diff","newValues","isItemSelected","renderOptions","items","render","renderList","selected","getIsSelected","key","index","Boolean","processedTerm","isObject","handleOutsideClick","focusFilterInput","isOpen","toggleDropDown","state","amount","renderSelectAll","includeSelectAll","includeFilter","filterPlaceholder","buttonProps","ariaOwns","dropdownStyle","maxHeight","overflowY","hidden","visibility","showSelectAll"],"mappings":"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","sourcesContent":["export const debounce = (fn: Function, delay: number) => {\n  let timeoutID: NodeJS.Timer | null = null;\n  return function(...args: any[]) {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n    //@ts-ignore\n    const that: any = this as any;\n    timeoutID = setTimeout(() => {\n      fn.apply(that, args);\n    }, delay);\n  };\n};\n","/**\n * Check if a string contains a value\n */\nexport function includes(\n  str: string,\n  term: string,\n  caseSensitive: boolean = false\n): boolean {\n  if (!caseSensitive) {\n    return (\n      String(str)\n        .toLowerCase()\n        .indexOf(String(term).toLowerCase()) > -1\n    );\n  } else {\n    return String(str).indexOf(String(term)) > -1;\n  }\n}\n","import { OptionsType, OptionType, ComplexOptionType } from 'types';\n\nexport const isDataObject = (\n  obj: OptionType | undefined,\n  valueKey: string | undefined,\n  labelKey: string | undefined\n): boolean => {\n  if (typeof labelKey === 'undefined' || typeof valueKey === 'undefined') {\n    return false;\n  }\n  return (\n    typeof obj === 'object' &&\n    obj.hasOwnProperty(valueKey) &&\n    obj.hasOwnProperty(labelKey)\n  );\n};\n\nexport const hasItem = (\n  all: OptionsType | OptionType | undefined,\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string,\n  returnIndex: boolean = false\n) => {\n  if (!all || !item) return false;\n  if (Array.isArray(all)) {\n    if (isDataObject(item, valueKey, labelKey)) {\n      const find = all.findIndex(\n        opt =>\n          (opt as ComplexOptionType)[valueKey!] ===\n          (item as ComplexOptionType)[valueKey!]\n      );\n      if (returnIndex) {\n        return find;\n      }\n      return find > -1;\n    } else {\n      const indexOfItem = all.indexOf(item);\n      if (returnIndex) {\n        return indexOfItem;\n      }\n      return indexOfItem > -1;\n    }\n  } else {\n    if (isDataObject(item, valueKey, labelKey)) {\n      return (\n        (all as ComplexOptionType)[valueKey!] ===\n        (item as ComplexOptionType)[valueKey!]\n      );\n    }\n    return all === item;\n  }\n};\n\nexport const hasItemIndex = (\n  all: OptionsType | OptionType,\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n): number => hasItem(all, item, valueKey, labelKey, true) as number;\n\nexport const keyExtractor = (\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n) =>\n  isDataObject(item, valueKey, labelKey)\n    ? (item as ComplexOptionType)[valueKey!]\n    : item;\nexport const labelExtractor = (\n  item: OptionType,\n  valueKey?: string,\n  labelKey?: string\n) =>\n  isDataObject(item, valueKey, labelKey)\n    ? (item as ComplexOptionType)[labelKey!]\n    : item;\n\nexport function sortCollection(array: any[], valueKey?: string): any[] {\n  if (valueKey) {\n    return array.sort((a, b) => (a[valueKey] < b[valueKey] ? -1 : 1));\n  } else {\n    return array.sort((a, b) => (a < b ? -1 : 1));\n  }\n}\n\nexport function arraysEqual(left: any[], right: any[]): boolean {\n  if (left.length !== right.length) return false;\n  const leftLen = left.length;\n  let i = leftLen;\n  while (i) {\n    if (left[i] !== right[i]) return false;\n    i--;\n  }\n  return true;\n}\n\nexport const asArray = (obj: any): any[] => obj || [];\n","function split(str: string): string {\n  let a: number = 1;\n  let res: string = '';\n\n  const parts = (str || '').split('%');\n  const len: number = parts.length;\n\n  if (len > 0) {\n    res += parts[0];\n  }\n\n  for (let i = 1; i < len; i++) {\n    if (parts[i][0] === 's' || parts[i][0] === 'd') {\n      let value = arguments[a++];\n      res += parts[i][0] === 'd' ? Math.floor(value) : value;\n    } else if (parts[i][0]) {\n      res += '%' + parts[i][0];\n    } else {\n      i++;\n      res += '%' + parts[i][0];\n    }\n\n    res += parts[i].substring(1);\n  }\n\n  return res;\n}\n\nconst regex = /%[sdj]/;\n\nexport function format(message: string, ...args: any[]) {\n  if (regex.test(message)) {\n    return split.apply(null, arguments as any);\n  }\n  return Array.from(args).join(' ');\n}\n","import * as React from 'react';\nimport { format } from './lib/format';\nimport { isDataObject } from './lib/utils';\nimport { includes } from './lib/includes';\nimport {\n  OptionsType,\n  OptionType,\n  ComplexOptionType,\n  SimpleOptionType,\n  SelectionState,\n} from './types';\n\nconst isEmptyValue = (value: any) =>\n  value === null ||\n  value === undefined ||\n  (Array.isArray(value) && !value.length);\n\ntype PlaceholderProps = {\n  placeholder?: string;\n  value: OptionsType | OptionType | undefined;\n  numberDisplayed: number;\n  multiple: boolean;\n  valueKey?: string;\n  labelKey?: string;\n  manySelectedPlaceholder?: string;\n  allSelectedPlaceholder?: string;\n  allSelected: SelectionState;\n};\nconst Placeholder: React.FC<PlaceholderProps> = React.memo(\n  ({\n    placeholder,\n    value,\n    numberDisplayed,\n    multiple,\n    valueKey,\n    labelKey,\n    manySelectedPlaceholder,\n    allSelectedPlaceholder,\n    allSelected,\n  }) => {\n    let message: string = '';\n    if (isEmptyValue(value)) {\n      message = placeholder || '';\n    } else {\n      if (Array.isArray(value) && multiple) {\n        // If type is array and values length less than number displayed\n        // join the values\n        if (value.length <= numberDisplayed) {\n          message = value\n            .map(opt => {\n              if (isDataObject(opt, valueKey, labelKey)) {\n                return (opt as ComplexOptionType)[labelKey!];\n              }\n              return opt;\n            })\n            .join(', ');\n        } else {\n          // if many selected and not all selected then use the placeholder\n          if (manySelectedPlaceholder && allSelected !== 'all') {\n            // if it doesn't include the sprintf token then just use the placeholder\n            message = includes(manySelectedPlaceholder, '%s')\n              ? format(manySelectedPlaceholder, value.length)\n              : manySelectedPlaceholder;\n            //If all selected and there is an allselectedplaceholder use that\n          } else if (allSelected && allSelectedPlaceholder) {\n            // if it doesn't include the sprintf token then just use the placeholder\n            message = includes(allSelectedPlaceholder, '%s')\n              ? format(allSelectedPlaceholder, value.length)\n              : allSelectedPlaceholder;\n          }\n        }\n      } else {\n        let tempValue = Array.isArray(value) ? value[0] : value;\n        if (isDataObject(tempValue, valueKey, labelKey)) {\n          message = (tempValue as ComplexOptionType)[labelKey!];\n        } else {\n          message = String(tempValue as SimpleOptionType);\n        }\n      }\n    }\n\n    return (\n      <span\n        className={!isEmptyValue(value) ? 'picky__placeholder' : undefined}\n        data-testid=\"picky_placeholder\"\n      >\n        {message}\n      </span>\n    );\n  },\n  areEqual\n);\n\nPlaceholder.defaultProps = {\n  placeholder: 'None selected',\n  allSelectedPlaceholder: '%s selected',\n  manySelectedPlaceholder: '%s selected',\n};\nPlaceholder.displayName = 'Picky(Placeholder)';\n\nfunction areEqual(prevProps: PlaceholderProps, nextProps: PlaceholderProps) {\n  return (\n    prevProps.multiple === nextProps.multiple &&\n    prevProps.value === nextProps.value &&\n    prevProps.numberDisplayed === nextProps.numberDisplayed &&\n    prevProps.allSelected === nextProps.allSelected &&\n    prevProps.allSelectedPlaceholder === nextProps.allSelectedPlaceholder\n  );\n}\nexport { Placeholder };\n","import * as React from 'react';\nexport type FilterProps = {\n  onFilterChange(term: string): void;\n  tabIndex: number | undefined;\n  placeholder?: string;\n} & React.RefAttributes<HTMLInputElement>;\n\nconst Filter: React.FC<FilterProps> = React.forwardRef(\n  (\n    { placeholder, tabIndex, onFilterChange },\n    ref: React.Ref<HTMLInputElement>\n  ) => {\n    return (\n      <div className=\"picky__filter\">\n        <input\n          ref={ref}\n          type=\"text\"\n          className=\"picky__filter__input\"\n          data-testid=\"picky__filter__input\"\n          placeholder={placeholder}\n          tabIndex={tabIndex}\n          aria-label=\"filter options\"\n          onChange={e => onFilterChange(e.target.value)}\n        />\n      </div>\n    );\n  }\n);\n\nFilter.defaultProps = {\n  placeholder: 'Filter...',\n};\n\nFilter.displayName = 'Picky(Filter)';\n\nexport { Filter };\n","import * as React from 'react';\nimport { isDataObject } from './lib/utils';\nimport { OptionType, ComplexOptionType } from './types';\n\ntype OptionProps = {\n  isSelected: boolean;\n  valueKey?: string;\n  labelKey?: string;\n  id: string;\n  item: OptionType;\n  style?: React.CSSProperties;\n  selectValue(option: OptionType): void;\n  multiple: boolean;\n  tabIndex: number | undefined;\n  disabled: boolean;\n};\nconst Option: React.FC<OptionProps> = React.memo(\n  ({\n    id,\n    item,\n    isSelected,\n    labelKey,\n    valueKey,\n    selectValue,\n    style,\n    multiple,\n    tabIndex,\n    disabled,\n  }) => {\n    const cssClass = isSelected ? 'option selected' : 'option';\n    const body = isDataObject(item, labelKey, valueKey)\n      ? (item as ComplexOptionType)[labelKey!]\n      : item;\n    const inputType = multiple ? 'checkbox' : 'radio';\n    const select = () => !disabled && selectValue(item);\n\n    return (\n      <div\n        tabIndex={tabIndex}\n        id={id}\n        role=\"option\"\n        style={style}\n        data-testid=\"option\"\n        data-selected={isSelected ? 'selected' : ''}\n        aria-selected={isSelected}\n        className={cssClass}\n        onClick={select}\n        onKeyPress={e => {\n          e.preventDefault();\n          if (!disabled) {\n            selectValue(item);\n          }\n        }}\n      >\n        <input\n          type={inputType}\n          readOnly\n          tabIndex={-1}\n          disabled={disabled}\n          checked={isSelected}\n          aria-label={body}\n          data-testid={'option-checkbox'}\n        />\n        {body}\n      </div>\n    );\n  },\n  areEqual\n);\n\nOption.displayName = 'Picky(Option)';\n\nfunction areEqual(prevProps: OptionProps, nextProps: OptionProps) {\n  return (\n    prevProps.multiple === nextProps.multiple &&\n    prevProps.isSelected === nextProps.isSelected &&\n    prevProps.id === nextProps.id &&\n    prevProps.item === nextProps.item &&\n    prevProps.tabIndex === nextProps.tabIndex &&\n    prevProps.disabled === nextProps.disabled\n  );\n}\nexport { Option };\n","import * as React from 'react';\nimport { SelectionState } from './types';\n\ntype SelectAllProps = {\n  tabIndex: number | undefined;\n  disabled: boolean;\n  allSelected: SelectionState;\n  id: string;\n  selectAllText?: string;\n  toggleSelectAll(): void;\n  visible: boolean;\n};\nconst SelectAll: React.FC<SelectAllProps> = React.memo(\n  ({\n    tabIndex,\n    disabled,\n    allSelected,\n    id,\n    selectAllText,\n    toggleSelectAll,\n    visible,\n  }) => {\n    const checkboxRef = React.createRef<HTMLInputElement>();\n    if (!visible) {\n      return null;\n    }\n\n    React.useEffect(() => {\n      if (checkboxRef.current === null) return;\n      checkboxRef.current.indeterminate = allSelected === 'partial';\n    }, [allSelected]);\n    return (\n      <div\n        tabIndex={tabIndex}\n        role=\"option\"\n        data-testid=\"selectall\"\n        id={id + '-option-' + 'selectall'}\n        data-selectall=\"true\"\n        aria-selected={allSelected === 'all'}\n        className={allSelected === 'all' ? 'option selected' : 'option'}\n        onClick={toggleSelectAll}\n        onKeyPress={toggleSelectAll}\n      >\n        <input\n          type=\"checkbox\"\n          ref={checkboxRef}\n          readOnly\n          data-testid=\"selectall-checkbox\"\n          tabIndex={-1}\n          checked={allSelected === 'all'}\n          aria-label=\"select all\"\n          disabled={disabled}\n        />\n        <span data-testid=\"select-all-text\">{selectAllText}</span>\n      </div>\n    );\n  },\n  areEqual\n);\n\nSelectAll.displayName = 'Picky(SelectAll)';\n\nfunction areEqual(prevProps: SelectAllProps, nextProps: SelectAllProps) {\n  return (\n    prevProps.tabIndex === nextProps.tabIndex &&\n    prevProps.disabled === nextProps.disabled &&\n    prevProps.allSelected === nextProps.allSelected &&\n    prevProps.selectAllText === nextProps.selectAllText &&\n    prevProps.visible === nextProps.visible\n  );\n}\nexport { SelectAll };\n","import * as React from 'react';\n\ntype ButtonProps = {} & React.DetailedHTMLProps<\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\n  HTMLButtonElement\n>;\nconst Button: React.FC<ButtonProps> = ({\n  id,\n  disabled,\n  onClick,\n  children,\n  className,\n  ...rest\n}) => {\n  const buttonId = `${id}__button`;\n  const classes = [\n    'picky__input',\n    disabled ? 'picky__input--disabled' : '',\n    className,\n  ].join(' ');\n\n  return (\n    <button\n      id={buttonId}\n      type=\"button\"\n      className={classes}\n      onClick={onClick}\n      data-testid=\"picky-input\"\n      disabled={disabled}\n      {...rest}\n    >\n      {children}\n    </button>\n  );\n};\n\nButton.displayName = 'Picky(Button)';\nexport { Button };\n","import * as React from 'react';\nimport { debounce } from './lib/debounce';\nimport { includes } from './lib/includes';\nimport {\n  isDataObject,\n  hasItem,\n  keyExtractor,\n  hasItemIndex,\n  sortCollection,\n  arraysEqual,\n  asArray,\n} from './lib/utils';\nimport { Placeholder } from './Placeholder';\nimport { Filter } from './Filter';\nimport { Option } from './Option';\nimport './Picky.css';\nimport { SelectAll } from './SelectAll';\nimport { Button } from './Button';\nimport {\n  RenderListProps,\n  SelectAllMode,\n  RenderSelectAllProps,\n  RenderProps,\n  OptionsType,\n  OptionType,\n  ComplexOptionType,\n  SelectionState,\n} from './types';\n\ntype PickyState = {\n  selectedValue: OptionsType | OptionType | null;\n  open?: boolean;\n  filtered?: boolean;\n  filteredOptions: OptionsType;\n  allSelected: SelectionState;\n};\n\ntype PickyProps = {\n  /**\n   * The ID for the component, used for accessibility\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  id: string;\n  /**\n   * Default placeholder text\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  placeholder?: string;\n\n  /**\n   * The value of the Picky.\n   * Picky is a controlled component so use this in conjunction with onChange and update the value accordingly\n   *\n   * @type {PickyValue}\n   * @memberof PickyProps\n   */\n  value?: OptionsType | OptionType;\n\n  /**\n   * The number of items to be displayed before the placeholder turns to \"5 selected\"\n   *\n   * @type {number} [3]\n   * @memberof PickyProps\n   */\n  numberDisplayed?: number;\n\n  /**\n   * True if multiple options can be selected\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  multiple?: boolean;\n\n  /**\n   * Options for the Picky component either [1, 2, 3] or [{label: \"1\", value: 1}] in conjunction with valueKey and labelKey props\n   *\n   * @type {any[]} [[]]\n   * @memberof PickyProps\n   */\n  options: any[];\n\n  /**\n   * Called when the selected value changes, use this to re-set the value prop\n   *\n   * @memberof PickyProps\n   */\n  onChange: (value: OptionsType | OptionType) => any;\n\n  /**\n   * Used to control whether the Picky is open by default\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  open?: boolean;\n\n  /**\n   * True if you want a select all option at the top of the dropdown.\n   * Won't appear if multiple is false\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  includeSelectAll?: boolean;\n\n  /**\n   * True if you want a filter input at the top of the dropdown, used to filter items.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  includeFilter?: boolean;\n\n  /**\n   * Used to debounce onFilterChange events. Set value to zero to disable debounce. Duration is in milliseconds.\n   *\n   * @type {number} [300]\n   * @memberof PickyProps\n   */\n  filterDebounce?: number;\n\n  /**\n   * The max height of the dropdown, height is in px.\n   *\n   * @type {number} [300]\n   * @memberof PickyProps\n   */\n  dropdownHeight?: number;\n\n  /**\n   * Callback when options have been filtered.\n   *\n   * @memberof PickyProps\n   */\n  onFiltered?: (filteredOptions: any[]) => any;\n\n  /**\n   * Called when dropdown is opened\n   *\n   * @memberof PickyProps\n   */\n  onOpen?: () => any;\n\n  /**\n   * Called when dropdown is closed\n   *\n   * @memberof PickyProps\n   */\n  onClose?: () => any;\n\n  /**\n   *  Indicates which key is the value in an object. Used when supplied options are objects.\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  valueKey?: string;\n  /**\n   *  Indicates which key is the label in an object. Used when supplied options are objects.\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  labelKey?: string;\n\n  /**\n   * Render prop for individual options\n   *\n   * @memberof PickyProps\n   */\n  render?: (props: RenderProps) => any;\n\n  /**\n   * Tab index for accessibility\n   *\n   * @type {PickyTabIndex} [0]\n   * @memberof PickyProps\n   */\n  tabIndex?: number | undefined;\n\n  /**\n   * True if the dropdown should be permanently open.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  keepOpen?: boolean;\n\n  /**\n   * The placeholder when the number of items are higher than {numberDisplayed} and all aren't selected.\n   * Default \"%s selected\" where %s is the number of items selected.\n   *\n   * @type {string} [\"%s selected\"]\n   * @memberof PickyProps\n   */\n  manySelectedPlaceholder?: string;\n\n  /**\n   * Default \"%s selected\" where %s is the number of items selected. This gets used when all options are selected.\n   *\n   * @type {string} [\"%s selected\"]\n   * @memberof PickyProps\n   */\n  allSelectedPlaceholder?: string;\n\n  /**\n   * Default select all text\n   *\n   * @type {string} [\"Select all\"]\n   * @memberof PickyProps\n   */\n  selectAllText?: string;\n\n  /**\n   * Render prop for rendering a custom select all component\n   *\n   * @memberof PickyProps\n   */\n  renderSelectAll?: (props: RenderSelectAllProps) => any;\n\n  /**\n   * If set to true, will focus the filter by default when opened.\n   *\n   * @type {boolean}\n   * @memberof PickyProps\n   */\n  defaultFocusFilter?: boolean;\n\n  /**\n   * Used to supply a class to the root picky component. Helps when using Picky with a CSS-in-JS library like styled-components\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  className?: string;\n\n  /**\n   * Render prop for whole list, you can use this to add virtualization/windowing if necessary.\n   *\n   * @memberof PickyProps\n   */\n  renderList?: (props: RenderListProps) => any;\n\n  /**\n   * Override the placeholder of the filter\n   *\n   * @type {string}\n   * @memberof PickyProps\n   */\n  filterPlaceholder?: string;\n  /**\n   * Will provide the input value of filter to the picky dropdown, so that if we have a larger list of options then we can only supply the matching options based on this value.\n   */\n  getFilterValue?: (term: string) => any;\n  /**\n   *  If true options will be returned when they match case, defaults to false\n   */\n  caseSensitiveFilter?: boolean;\n\n  /**\n   * Pass additional props the the button component\n   *\n   * @type {React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>}\n   * @memberof PickyProps\n   */\n  buttonProps?: React.DetailedHTMLProps<\n    React.ButtonHTMLAttributes<HTMLButtonElement>,\n    HTMLButtonElement\n  >;\n\n  /**\n   * True if you want a disabled Picky\n   */\n  disabled?: boolean;\n\n  /**\n   * Allows for additional functionalty with select all and filtering, see the docs.\n   */\n  selectAllMode?: SelectAllMode;\n  /**\n   * When true the filter input will be cleared when the dropdown is closed\n   *\n   * @type {boolean}\n   */\n  clearFilterOnClose?: boolean;\n  /**\n   * A string function which takes the filter term and returns a new filter term.\n   *\n   * Useful for trimming the filter term.\n   *\n   * @type {StringFunc}\n   */\n  filterTermProcessor?: (term: string) => string;\n};\n\nclass Picky extends React.PureComponent<PickyProps, PickyState> {\n  static defaultProps = {\n    id: 'picky',\n    numberDisplayed: 3,\n    options: [],\n    filterDebounce: 150,\n    dropdownHeight: 300,\n    onChange: () => {},\n    tabIndex: 0,\n    keepOpen: true,\n    selectAllText: 'Select all',\n    selectAllMode: 'default',\n    filterTermProcessor: (term: string) => term,\n  };\n  node: HTMLDivElement | null = null;\n  filter: HTMLInputElement | null = null;\n  constructor(props: PickyProps) {\n    super(props);\n    this.state = {\n      selectedValue: props.value || (props.multiple ? [] : null),\n      open: props.open,\n      filtered: false,\n      filteredOptions: [],\n      allSelected: 'none',\n    };\n    this.toggleDropDown = this.toggleDropDown.bind(this);\n    this.toggleSelectAll = this.toggleSelectAll.bind(this);\n    this.onFilterChange = this.onFilterChange.bind(this);\n    this.selectValue = this.selectValue.bind(this);\n    this.allSelected = this.allSelected.bind(this);\n    this.handleOutsideClick = this.handleOutsideClick.bind(this);\n    this.isItemSelected = this.isItemSelected.bind(this);\n    this.focusFilterInput = this.focusFilterInput.bind(this);\n    this.getValue = this.getValue.bind(this);\n  }\n  UNSAFE_componentWillMount() {\n    this.setState({\n      allSelected: this.allSelected(),\n    });\n  }\n\n  componentDidMount() {\n    this.focusFilterInput(!!this.state.open);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('click', this.handleOutsideClick, false);\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: PickyProps) {\n    if (\n      this.props.options !== nextProps.options ||\n      this.props.value !== nextProps.value\n    ) {\n      let valuesEqual = Array.isArray(nextProps.value)\n        ? arraysEqual(nextProps.value, this.props.value as OptionsType)\n        : nextProps.value === this.props.value;\n\n      let optsEqual = arraysEqual(nextProps.options, this.props.options);\n      const currentOptions = this.state.filtered\n        ? this.state.filteredOptions\n        : nextProps.options;\n      const currentValues = this.state.filtered\n        ? this.state.filteredOptions.filter(value => {\n            if (Array.isArray(nextProps.value)) {\n              return nextProps.value.includes(value);\n            }\n            return true;\n          })\n        : nextProps.value;\n      this.setState({\n        allSelected: !(valuesEqual && optsEqual)\n          ? // FIXME\n            //@ts-ignore\n            this.allSelected(currentValues, currentOptions)\n          : this.allSelected(),\n      });\n    }\n  }\n\n  selectValue(val: string | number) {\n    const valueLookup = this.props.value;\n    if (this.props.multiple && Array.isArray(valueLookup)) {\n      const itemIndex = hasItemIndex(\n        valueLookup,\n        val,\n        this.props.valueKey,\n        this.props.labelKey\n      );\n\n      let selectedValue: OptionsType = [];\n      if (itemIndex > -1) {\n        selectedValue = [\n          ...valueLookup.slice(0, itemIndex),\n          ...valueLookup.slice(itemIndex + 1),\n        ];\n      } else {\n        selectedValue = [...(this.props.value as OptionsType), val];\n      }\n      this.setState(\n        {\n          allSelected: this.allSelected(selectedValue),\n        },\n        () => {\n          this.props.onChange(selectedValue);\n        }\n      );\n    } else {\n      this.props.onChange(val);\n    }\n  }\n  /**\n   * Get the value of a given option or value safely\n   *\n   * @param {*} option\n   * @returns\n   * @memberof Picky\n   */\n  getValue(option: OptionType) {\n    return typeof this.props.valueKey !== 'undefined'\n      ? (option as ComplexOptionType)[this.props.valueKey]\n      : option;\n  }\n  /**\n   * Determine whether all items are selected\n   *\n   * @returns {Boolean}\n   * @memberof Picky\n   */\n  allSelected(\n    overrideSelected?: any[],\n    overrideOptions?: any[]\n  ): SelectionState {\n    const { value, options } = this.props;\n    const selectedValue = overrideSelected || value;\n    const selectedOptions = overrideOptions || options;\n\n    // If there are no options we are getting a false positive for all items being selected\n    if (selectedOptions && selectedOptions.length === 0) {\n      return 'none';\n    }\n    let copiedOptions = selectedOptions.map(this.getValue);\n    let copiedValues = Array.isArray(selectedValue)\n      ? selectedValue.map(this.getValue)\n      : [];\n\n    const areEqual = arraysEqual(\n      sortCollection(copiedValues),\n      sortCollection(copiedOptions)\n    );\n    if (areEqual) {\n      return 'all';\n    } else if (copiedValues.length > 0) {\n      return 'partial';\n    } else {\n      return 'none';\n    }\n  }\n  /**\n   * Toggles select all\n   *\n   * @memberof Picky\n   */\n  toggleSelectAll() {\n    if (this.props.disabled) return;\n    this.setState(\n      state => {\n        return {\n          ...state,\n          allSelected: this.state.allSelected === 'all' ? 'none' : 'all',\n        };\n      },\n      () => {\n        if (this.state.allSelected !== 'all') {\n          if (this.state.filtered) {\n            const diff = asArray(this.props.value).filter(\n              item => !this.state.filteredOptions.includes(item)\n            );\n            this.props.onChange(diff);\n          } else {\n            this.props.onChange([]);\n          }\n        } else {\n          if (this.state.filtered) {\n            let newValues = [\n              ...(this.props.value as any[]),\n              ...this.state.filteredOptions,\n            ];\n            this.props.onChange(newValues);\n          } else {\n            this.props.onChange(this.props.options);\n          }\n        }\n      }\n    );\n  }\n\n  isItemSelected(item: OptionType): boolean {\n    return hasItem(\n      this.props.value,\n      item,\n      this.props.valueKey,\n      this.props.labelKey\n    ) as boolean;\n  }\n\n  renderOptions() {\n    const items = this.state.filtered\n      ? this.state.filteredOptions\n      : this.props.options;\n\n    const {\n      labelKey,\n      valueKey,\n      multiple,\n      render,\n      tabIndex,\n      renderList,\n      disabled,\n    } = this.props;\n    if (renderList) {\n      return renderList({\n        items,\n        selected: this.props.value,\n        multiple,\n        tabIndex,\n        getIsSelected: this.isItemSelected,\n        selectValue: this.selectValue,\n        disabled,\n      });\n    }\n    return items.map((item, index) => {\n      // Create a key based on the options value\n      const key = keyExtractor(item, valueKey, labelKey);\n\n      const isSelected = this.isItemSelected(item);\n      // If render prop supplied for items call that.\n      if (typeof render === 'function') {\n        return render({\n          index,\n          item,\n          isSelected,\n          selectValue: this.selectValue,\n          labelKey: labelKey,\n          valueKey: valueKey,\n          multiple: multiple,\n          disabled,\n        });\n      } else {\n        // Render a simple option\n        return (\n          <Option\n            key={key}\n            item={item}\n            isSelected={isSelected}\n            selectValue={this.selectValue}\n            labelKey={labelKey}\n            valueKey={valueKey}\n            multiple={Boolean(multiple)}\n            tabIndex={tabIndex}\n            disabled={Boolean(disabled)}\n            id={this.props.id + '-option-' + index}\n          />\n        );\n      }\n    });\n  }\n  /**\n   * Called when Filter term changes. Sets filteredOptions and filtered state.\n   *\n   * @param {any} term\n   * @returns\n   * @memberof Picky\n   */\n  onFilterChange(term: string) {\n    const processedTerm =\n      typeof this.props.filterTermProcessor === 'function'\n        ? this.props.filterTermProcessor(term)\n        : term;\n\n    /**\n     * getFilterValue function will provide the input value of filter to the picky dropdown, so that if we have a larger list of options then we can only supply the matching options based on this value\n     */\n    if (this.props.getFilterValue) {\n      this.props.getFilterValue(processedTerm);\n    }\n    if (!processedTerm.trim()) {\n      return this.setState({\n        filtered: false,\n        filteredOptions: [],\n        allSelected: asArray(this.props.value).length > 0 ? 'partial' : 'none',\n      });\n    }\n    const isObject = isDataObject(\n      this.props.options && this.props.options[0],\n      this.props.valueKey,\n      this.props.labelKey\n    );\n    const filteredOptions = this.props.options.filter(option => {\n      if (isObject) {\n        return includes(\n          option[this.props.labelKey!],\n          processedTerm,\n          !!this.props.caseSensitiveFilter\n        );\n      }\n      return includes(option, processedTerm, this.props.caseSensitiveFilter);\n    });\n    this.setState(\n      {\n        filtered: true,\n        filteredOptions,\n      },\n      () => {\n        if (this.props.onFiltered) {\n          this.props.onFiltered(filteredOptions);\n        }\n      }\n    );\n  }\n  /**\n   *\n   * Called by a click event listener. Used to determine any clicks that occur outside of the component.\n   * @param {MouseEvent} e\n   * @returns\n   * @memberof Picky\n   */\n  handleOutsideClick(e: any) {\n    // If keep open then don't toggle dropdown\n    // If radio and not keepOpen then auto close it on selecting a value\n    // If radio and click to the filter input then don't toggle dropdown\n    const keepOpen = this.props.keepOpen || this.props.multiple;\n    if (this.node && this.node.contains(e.target) && keepOpen) {\n      return;\n    }\n    if (this.filter && this.filter.contains(e.target)) {\n      return;\n    }\n    this.toggleDropDown();\n  }\n\n  focusFilterInput(isOpen: boolean) {\n    if (!this.filter) return;\n    if (isOpen && this.props.defaultFocusFilter) {\n      this.filter.focus();\n    }\n    if (!isOpen && this.props.clearFilterOnClose === true) {\n      this.filter.value = '';\n    }\n  }\n  /**\n   * Toggle state of dropdown\n   *\n   * @memberof Picky\n   */\n  toggleDropDown() {\n    if (!this.state.open) {\n      // Add event listener to listen for clicks to determine if click occured outside the component or not\n      document.addEventListener('click', this.handleOutsideClick, false);\n    } else {\n      // Remove\n      document.removeEventListener('click', this.handleOutsideClick, false);\n    }\n\n    this.setState(\n      state => {\n        return {\n          ...state,\n          // Toggle open state\n          open: !state.open,\n          filtered: this.props.clearFilterOnClose ? false : state.filtered,\n          filteredOptions: this.props.clearFilterOnClose\n            ? []\n            : state.filteredOptions,\n        };\n      },\n      () => {\n        const isOpen = !!this.state.open;\n        // Prop callbacks\n        this.focusFilterInput(isOpen);\n        if (isOpen && this.props.onOpen) {\n          this.props.onOpen();\n        } else if (!isOpen && this.props.onClose) {\n          this.props.onClose();\n        }\n      }\n    );\n  }\n\n  get filterDebounce() {\n    const { filterDebounce } = this.props;\n    const amount = filterDebounce || 0;\n    return (amount || 0) > 0\n      ? debounce(this.onFilterChange, amount)\n      : this.onFilterChange;\n  }\n\n  get showSelectAll(): boolean {\n    const { renderSelectAll, multiple, includeSelectAll } = this.props;\n    return Boolean(\n      !renderSelectAll &&\n        includeSelectAll &&\n        multiple &&\n        ((this.props.selectAllMode === 'default' && !this.state.filtered) ||\n          this.props.selectAllMode === 'filtered')\n    );\n  }\n  render() {\n    const {\n      className,\n      placeholder,\n      value,\n      multiple,\n      numberDisplayed,\n      includeFilter,\n      valueKey,\n      labelKey,\n      tabIndex,\n      dropdownHeight,\n      renderSelectAll,\n      filterPlaceholder,\n      disabled,\n      buttonProps,\n    } = this.props;\n    const { open } = this.state;\n    let ariaOwns = '';\n    if (open) {\n      ariaOwns += this.props.id + '-list';\n    }\n    const buttonId = `${this.props.id}__button`;\n    const dropdownStyle: React.CSSProperties = {\n      maxHeight: dropdownHeight,\n      overflowY: 'scroll',\n    };\n    return (\n      <div\n        ref={node => {\n          this.node = node;\n        }}\n        className={['picky', className].join(' ')}\n        id={this.props.id}\n        role=\"combobox\"\n        aria-controls={buttonId}\n        aria-expanded={open}\n        aria-haspopup={open}\n        aria-owns={ariaOwns}\n        tabIndex={tabIndex}\n      >\n        <Button\n          id={`${this.props.id}__button`}\n          disabled={disabled}\n          onClick={this.toggleDropDown}\n          {...buttonProps}\n        >\n          <Placeholder\n            allSelected={this.state.allSelected}\n            placeholder={placeholder}\n            manySelectedPlaceholder={this.props.manySelectedPlaceholder}\n            allSelectedPlaceholder={this.props.allSelectedPlaceholder}\n            value={value}\n            multiple={Boolean(multiple)}\n            numberDisplayed={numberDisplayed!}\n            valueKey={valueKey}\n            labelKey={labelKey}\n            data-testid=\"placeholder-component\"\n          />\n        </Button>\n        <div\n          className=\"picky__dropdown\"\n          id={this.props.id + '-list'}\n          aria-hidden={!open}\n          hidden={!open}\n          style={open ? dropdownStyle : { visibility: 'hidden' }}\n        >\n          {includeFilter && (\n            <Filter\n              tabIndex={tabIndex}\n              ref={filter => (this.filter = filter)}\n              placeholder={filterPlaceholder}\n              onFilterChange={this.filterDebounce}\n            />\n          )}\n          {renderSelectAll ? (\n            renderSelectAll({\n              filtered: Boolean(this.state.filtered),\n              allSelected: this.state.allSelected,\n              toggleSelectAll: this.toggleSelectAll,\n              tabIndex,\n              multiple: Boolean(multiple),\n              disabled: Boolean(disabled),\n            })\n          ) : (\n            <SelectAll\n              visible={this.showSelectAll}\n              tabIndex={tabIndex}\n              disabled={!!disabled}\n              allSelected={this.state.allSelected}\n              id={this.props.id}\n              selectAllText={this.props.selectAllText}\n              toggleSelectAll={this.toggleSelectAll}\n            />\n          )}\n          {open && <div data-testid=\"dropdown\">{this.renderOptions()}</div>}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { Picky };\n"]},"metadata":{},"sourceType":"script"}