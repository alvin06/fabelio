{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Product","props","className","name","price","description","furnitureStyle","deliveryTime","App","state","ListProducts","ListProductsFiltered","ListFurnitureStyle","value","label","ListDelivery","SearchValue","SelectValue","SelectDelivValue","this","_getApiList","listProduct","listFurniture","axios","get","then","response","data","products","setState","i","furniture_styles","length","push","catch","err","console","log","e","target","substr","selectedValue","value1","type","onChange","_changeBySearch","bind","placeholder","options","_changeBySelectFurniture","_changeBySelectDelivery","renderProductBySearch","filteredProduct","filter","toLowerCase","indexOf","ListProduct","delivery_time","furniture_style","j","map","item","key","itemFurniture","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26e8bc70.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport ReactMultiSelectCheckboxes from 'react-multiselect-checkboxes';\n// import Select from 'react-select';\n\nfunction Product(props){\n  return(\n    <div className=\"card\">\n      <div className=\"card-container\">\n        <div className=\"row\">\n          <b className=\"col-lg-6 product-name\">{props.name}</b>\n          <p className=\"col-lg-6 right price\">{props.price}</p>\n        </div>\n        <p>{props.description}</p>\n        <p className=\"row\">{props.furnitureStyle}</p>\n        <p className=\"right delivery\">{props.deliveryTime} Days</p>\n      </div>\n    </div>\n  )\n}\n\nclass App extends Component{\n  state ={\n    ListProducts:[],\n    ListProductsFiltered:[],\n    ListFurnitureStyle:[{\n      value:1,\n      label:''\n    }],\n    ListDelivery:[{\n        value:7,\n        label: '1 Week'\n      },\n      {\n        value: 14,\n        label: '2 Week'\n      },\n      {\n        value: 30,\n        label: '1 Month'\n      },\n      {\n        value: 31,\n        label: '& More'\n      }\n    ],\n    SearchValue:'',\n    SelectValue:[],\n    SelectDelivValue:0\n  }\n\n  componentWillMount(){\n    this._getApiList();\n  }\n\n  _getApiList(){\n    let listProduct = {...this.state.ListProducts};\n    // let listFurniture = {...this.state.ListFurnitureStyle};\n    let listFurniture =[];\n    axios.get('http://www.mocky.io/v2/5c9105cb330000112b649af8')\n    .then(response => {\n      // get list product from API\n      listProduct = response.data.products;\n      this.setState({ListProducts: listProduct});\n      // get list furniture style from API\n      for(let i = 0; i<response.data.furniture_styles.length; i++){\n        listFurniture.push({\n          value: response.data.furniture_styles[i],\n          label: response.data.furniture_styles[i]\n        })\n        this.setState({ListFurnitureStyle: listFurniture}); \n      }\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  _changeBySearch(e){\n    this.setState({SearchValue: e.target.value.substr(0,20)});\n  }\n  _changeBySelectFurniture(e){\n    let selectedValue = [] ;\n    for(let i=0; i<e.length; i++){\n      selectedValue.push(e[i].value)\n    }\n    this.setState({SelectValue: selectedValue})\n  }\n  _changeBySelectDelivery(e){\n    var value1 = 0;\n    for(let i=0; i<e.length; i++){\n      if(e[i].value > value1){\n        value1 = e[i].value\n      }\n    }\n    this.setState({SelectDelivValue: value1})\n  }\n\n  render(){\n    return (\n      <div className=\"\">\n        <div className=\"App-header\">\n          <input className=\"search\" type=\"text\" onChange = {this._changeBySearch.bind(this)} value={this.state.SearchValue} placeholder=\"Search...\"></input>\n          <br></br>\n          <div className=\"row\">\n            <ReactMultiSelectCheckboxes \n              options={this.state.ListFurnitureStyle}\n              onChange={this._changeBySelectFurniture.bind(this)}\n            />\n            <br/>\n            <ReactMultiSelectCheckboxes \n              options={this.state.ListDelivery}\n              onChange={this._changeBySelectDelivery.bind(this)}\n            />\n          </div>\n        </div>\n        {this.renderProductBySearch()}\n      </div>\n    );\n  }\n\n  renderProductBySearch(){\n    let filteredProduct = [];\n    // filter name product\n    filteredProduct = this.state.ListProducts.filter(\n      (ListProducts) => {\n        return ListProducts.name.toLowerCase().indexOf(this.state.SearchValue.toLowerCase()) !== -1;\n      }\n    );\n    // filter delivery time\n    if(this.state.SelectDelivValue !== 0){\n      filteredProduct = filteredProduct.filter(\n        (ListProduct) => {\n          return ListProduct.delivery_time <= this.state.SelectDelivValue;\n        }\n      )\n    };\n    // filter multiple select furniture style\n    if(this.state.SelectValue.length>0){\n      filteredProduct = filteredProduct.filter(\n        (ListProduct) => {\n          for (let i=0; i<ListProduct.furniture_style.length; i++){\n            for(let j=0; j<this.state.SelectValue.length; j++){\n              if(ListProduct.furniture_style[i] === this.state.SelectValue[j]){\n                return ListProduct.furniture_style[i];\n              }\n            }\n          }\n        }\n      )\n    }\n\n    return(\n      <div>\n        {filteredProduct.map(item => (\n          <Product key = {item.name} \n            name = {item.name} \n            price = {item.price} \n            description = {item.description} \n            deliveryTime = {item.delivery_time} \n            furnitureStyle = {item.furniture_style.map(itemFurniture =>(\n              <p className=\"text-left furniture-style\" key={itemFurniture}>{itemFurniture}</p>\n            ))}/>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}